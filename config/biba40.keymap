/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define LOWER  1
#define RAISE  2
#define ADJUST 3
#define FUNCTION 4

/* NOTE: At the time of the creation of thisxkeymap, there are no specified codes for 'eisuu' and 'kana' input in ZMK.
However, 'LANG1' and 'LANG2' are fully-functioning candidates for 'kana' and 'eisuu' input respectively.
As such, those are in use within the default layer at this time.*/

&soft_off {
    hold-time-ms = <3000>; // Only turn off it the key is held for 3 seconds or longer.
};

&mt { tapping-term-ms = <250>; };

/ {
    /* -------------------------
     * Auto Shift implementation
     * ------------------------- */

    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "tap-preferred";
            bindings = <&shifted>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        ctrl-back {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <10 11>;
            timeout-ms = <50>;
        };

        ctrl-delete {
            bindings = <&kp LC(DEL)>;
            key-positions = <9 10 11>;
            timeout-ms = <50>;
        };

        LeftWord {
            bindings = <&kp LC(LEFT_ARROW)>;
            key-positions = <46 45>;
            timeout-ms = <50>;
        };

        RightWord {
            bindings = <&kp LC(RIGHT)>;
            key-positions = <47 46>;
            timeout-ms = <50>;
        };

        Home {
            bindings = <&kp LC(HOME)>;
            key-positions = <33 34>;
            timeout-ms = <50>;
        };

        End {
            bindings = <&kp LC(END)>;
            key-positions = <34 35>;
            timeout-ms = <50>;
        };

        EraseLine {
            bindings = <&EraseLine>;
            key-positions = <34 46>;
            timeout-ms = <50>;
        };

        CtrlReturn {
            bindings = <&kp LC(RET)>;
            key-positions = <16 17>;
            timeout-ms = <50>;
        };

        Copy {
            bindings = <&kp LC(C)>;
            key-positions = <28 29>;
            timeout-ms = <50>;
        };

        Find {
            bindings = <&kp LC(F)>;
            key-positions = <18 19>;
            timeout-ms = <50>;
        };

        Paste {
            bindings = <&kp LC(V)>;
            key-positions = <30 31>;
            timeout-ms = <50>;
        };

        Minus {
            bindings = <&kp MINUS>;
            key-positions = <0 1>;
        };
    };

    macros {
        /* Auto-shift macros */

        shifted: macro_shifted_kp {
            compatible = "zmk,behavior-macro-one-param";
            label = "MACRO_SHIFTED_KP";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            label = "AUTOSHIFT_KP";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };

        onenote: onenote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(K) &kp LC(V) &kp ENTER>;
            label = "ONENOTE";
        };

        EraseLine: EraseLine {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END) &kp DELETE>;
            label = "ERASELINE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC   |   Q    |   W    |   E    |   R    |   T    |                                      |   Y    |   U    |   I    |   O    |   P    |  BSPC  |
            // |  TAB  |   A    |   S    |   D    |   F    |   G    |                                      |   H    |   J    |   K    |   L    |   ;    |   "    |
            // |  SHIFT |   Z    |   X    |   C    |   V    |   B    |                                      |   N    |   M    |   ,    |   .    |   UP   |  ENTER |
            // | FUNC |  CTRL  |  LALT  |  LGUI  | LOWER  | SPACE  |                                      | SPACE  |  RAISE |  SLASH |  LEFT  |  DOWN  |  RIGHT |

            bindings = <
&kp TAB              &as Q         &as W   &as E            &as R      &as T      &as Y      &as U      &as I                &as O       &as P                &kp BSPC
&mt LEFT_ALT ESCAPE  &as A         &as S   &as D            &as F      &as G      &as H      &as J      &as K                &as L       &mt SEMICOLON COLON  &as SQT
&kp LSHFT            &as Z         &as X   &as C            &as V      &as B      &as N      &as M      &as COMMA            &as PERIOD  &kp UP               &mt RIGHT_SHIFT QUESTION
&kp LEFT_CONTROL     &kp LEFT_WIN  &tog 3  &mt UNDER MINUS  &mo LOWER  &kp ENTER  &kp SPACE  &sl RAISE  &mt BACKSLASH SLASH  &kp LEFT    &kp DOWN             &kp RIGHT
            >;
        };

        lower_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  `   |  1   |  2   |  3   |  4   |  5   |                                  |  6   |  7   |  8   |  9   |  0   | BSPC |
            // |      |      |      |      |      |      |                                  |      |  4   |  5   |  6   |  -   |   +  |
            // |      |      |      |      |      |      |                                  |      |  1   |  2   |  3   |VOL U | ENTER|
            // | BOOT |      |      |      |      |      |                                  |      |      |  0   |      |VOL D |      |

            bindings = <
&mt UNDERSCORE MINUS  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7      &kp N8  &kp N9  &kp N0        &kp DELETE
&trans                &trans  &trans  &trans  &trans  &trans  &trans  &kp N4      &kp N5  &kp N6  &kp MINUS     &kp PLUS
&trans                &trans  &trans  &trans  &trans  &trans  &trans  &kp N1      &kp N2  &kp N3  &kp C_VOL_UP  &kp ENTER
&bootloader           &trans  &trans  &trans  &trans  &trans  &trans  &mo ADJUST  &kp N0  &trans  &kp C_VOL_DN  &trans
            >;
        };

        raise_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |   ~   |   !   |   @   |   #   |   $   |   %   |                                    |   ^   |   &   |   *   |   (   |   )   |  DEL  |
            // |       |       |       |       |       |       |                                    |       |   -   |   =   |   [   |   ]   |   \   |
            // |       |       |       |       |       |       |                                    |       |       |       | LBKT  | RBKT  |       |
            // |       |       |       |       |       |       |                                    |       |       |       | LT    | GT    | BOOT  |

            bindings = <
&onenote   &kp EXCL  &kp AT  &kp HASH         &kp DOLLAR        &kp PRCNT          &kp CARET   &kp AMPS      &kp ASTRK     &kp LPAR      &kp RPAR      &kp DEL
&trans     &trans    &trans  &kp LC(LA(DEL))  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp EQUAL   &kp MINUS     &kp PLUS      &kp LBRC      &kp RBRC      &kp PIPE
&kp LSHFT  &kp BSLH  &trans  &trans           &trans            &bt BT_CLR_ALL     &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans     &kp CAPS  &trans  &trans           &mo ADJUST        &trans             &trans      &trans        &trans        &kp LT        &kp GT        &bootloader
            >;
        };

        adjust_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  BT CLR  | BT SEL0  | BT SEL1  | BT SEL2  | BGT SEL3 | BT SEL4  |                                          |          |          |          |          |          |          |
            // |  BT NXT  | OUT TOG  | OUT USB  | OUT BLE  |          |          |                                          |          |          |          |          |          |          |
            // |  BT PRV  |BT_CLR_ALL|          |          |          |          |                                          |          |          |          |          |          |          |
            // |          |          |          |          |          |          |                                          |          |          |          |          |          |          |

            bindings = <
&kp TAB      &kp N1          &kp N2        &kp N3        &kp NUMBER_4  &kp N5     &kp N6     &kp NUMBER_7  &kp N8     &kp N9          &kp N0               &kp BACKSPACE
&bt BT_NXT   &out OUT_TOG    &out OUT_USB  &out OUT_BLE  &trans        &soft_off  &kp H      &kp J         &kp K      &kp L           &mt SEMICOLON COLON  &mt DOUBLE_QUOTES SINGLE_QUOTE
&bt BT_PRV   &bt BT_CLR_ALL  &trans        &trans        &trans        &trans     &kp N      &kp M         &kp COMMA  &kp PERIOD      &kp UP_ARROW         &mt RIGHT_SHIFT QUESTION
&bootloader  &trans          &trans        &kp MINUS     &trans        &kp RET    &kp SPACE  &trans        &trans     &kp LEFT_ARROW  &kp DOWN             &kp RIGHT
            >;
        };

        function_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1    |  F2   |  F3   |  F4   |  F5   |  F6   |                                      |  F7   |  F8   |  F9   |  F10  |  F11  |  F12  |
            // |        |       |       |       |       |       |                                      |       |       |       |       |       |       |
            // |        |       |       |       |       |       |                                      |       |       |       |       |       |       |
            // |        |       |       |       |       |       |                                      |       |       |       |       |       |       |

            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans   &trans
            >;
        };
    };
};
